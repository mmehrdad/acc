// <auto-generated />
using System;
using Acc.Infrastructure.DBContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Acc.Infrastructure.Migrations
{
    [DbContext(typeof(AccDbContext))]
    partial class AccDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Acc.Core.Entities.Accounts.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ParentId");

                    b.ToTable("Accounts", "ACC");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.CostCenter", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("CostCenters", "ACC");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.Document", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CostCenterId")
                        .IsRequired()
                        .HasColumnType("char(18)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentStatus")
                        .HasColumnType("int");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FinancialPeriodId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FinancialPeriodId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("Documents", "ACC");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.DocumentDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("DocumentDetails", "ACC");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.FinancialPeriod", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("FinancialPeriods", "ACC");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.Module", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("Modules", "IDN");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("Permissions", "IDN");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspRoles", "IDN");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("char(18)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.RoleModule", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ModuleId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleModules", "IDN");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.RoleModulePermission", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("RoleModuleId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleModuleId");

                    b.ToTable("RoleModulePermissions", "IDN");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspUsers", "IDN");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(18)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("char(18)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(18)");

                    b.Property<string>("RoleId")
                        .HasColumnType("char(18)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspUserRoles", "IDN");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("char(18)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Acc.Core.Entities.Persons.Department", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("Departments", "PRS");
                });

            modelBuilder.Entity("Acc.Core.Entities.Persons.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("Tel1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("StoreId");

                    b.ToTable("Persons", "PRS");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Cargo", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("Cargoes", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoFactor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CargoId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FactorId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FactorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("CargoFactors", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoLocation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("StoreId");

                    b.ToTable("CargoLocations", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApproverId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("RequestNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequesterId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("RequesterId");

                    b.ToTable("CargoRequests", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoRequestItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CargoId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CargoRequestId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("CargoRequestItems", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoSpecific", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CargoId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SpecificationId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("CargoSpecifics", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoStore", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CargoId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CargoLocationId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.PrimitiveCollection<string>("Serials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("CargoLocationId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("StoreId");

                    b.ToTable("CargoStores", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Factor", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FactorNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactorType")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("PersonId");

                    b.ToTable("Factors", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Specification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("ParentId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ParentId");

                    b.ToTable("Specifications", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Store", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StoreNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("Stores", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CargoRequestId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CargoRequestId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("Transactions", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.TransactionItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("CreatorIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("EntityGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifierId")
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<string>("ModifierIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ModifyLocked")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("char(18)")
                        .IsFixedLength();

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionItems", "STR");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.Account", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("AccountCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("AccountModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Accounts.Account", "Parent")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.CostCenter", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("CostCenterCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("CostCenterModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.Document", b =>
                {
                    b.HasOne("Acc.Core.Entities.Accounts.CostCenter", "CostCenter")
                        .WithMany("Documents")
                        .HasForeignKey("CostCenterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("DocumentCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Accounts.FinancialPeriod", "FinancialPeriod")
                        .WithMany("Documents")
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("DocumentModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Accounts.Document", "Reference")
                        .WithMany("References")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CostCenter");

                    b.Navigation("Creator");

                    b.Navigation("FinancialPeriod");

                    b.Navigation("Modifier");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.DocumentDetail", b =>
                {
                    b.HasOne("Acc.Core.Entities.Accounts.Account", "Account")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("DocumentDetailCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Accounts.Document", "Document")
                        .WithMany("DocumentDetails")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("DocumentDetailModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Accounts.DocumentDetail", "Reference")
                        .WithMany("References")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Creator");

                    b.Navigation("Document");

                    b.Navigation("Modifier");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.FinancialPeriod", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("FinancialPeriodCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("FinancialPeriodModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.Module", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("ModuleCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("ModuleModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.Permission", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("PermissionCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("PermissionModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.RoleModule", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("RoleModuleCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("RoleModuleModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.Module", "Module")
                        .WithMany("RoleModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.Role", "Role")
                        .WithMany("RoleModules")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Module");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.RoleModulePermission", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("RoleModulePermissionCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("RoleModulePermissionModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.Permission", "Permission")
                        .WithMany("RoleModulePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.RoleModule", "RoleModule")
                        .WithMany("RoleModulePermissions")
                        .HasForeignKey("RoleModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Permission");

                    b.Navigation("RoleModule");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Acc.Core.Entities.Persons.Department", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("DepartmentCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("DepartmentModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Persons.Person", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("PersonCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("PersonModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Stores.Store", "Store")
                        .WithMany("Emploees")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Cargo", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("CargoCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("CargoModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoFactor", b =>
                {
                    b.HasOne("Acc.Core.Entities.Stores.Cargo", "Cargo")
                        .WithMany("CargoFactors")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("CargoFactorCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Stores.Factor", "Factor")
                        .WithMany("CargoFactors")
                        .HasForeignKey("FactorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("CargoFactorModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cargo");

                    b.Navigation("Creator");

                    b.Navigation("Factor");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoLocation", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("CargoLocationCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("CargoLocationModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Stores.Store", "Store")
                        .WithMany("CargoLocations")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoRequest", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Approver")
                        .WithMany("CargoRequestApprovers")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("CargoRequestCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("CargoRequestModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Persons.Department", "Department")
                        .WithMany("CargoRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Persons.Person", "Requester")
                        .WithMany("CargoRequests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Creator");

                    b.Navigation("Department");

                    b.Navigation("Modifier");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoRequestItem", b =>
                {
                    b.HasOne("Acc.Core.Entities.Stores.Cargo", "Cargo")
                        .WithMany("CargoRequestItems")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("CargoRequestItemCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("CargoRequestItemModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Stores.CargoRequest", "CargoRequest")
                        .WithMany("CargoRequestItems")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Cargo");

                    b.Navigation("CargoRequest");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoSpecific", b =>
                {
                    b.HasOne("Acc.Core.Entities.Stores.Cargo", "Cargo")
                        .WithMany("CargoSpecifics")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("CargoSpecificCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("CargoSpecificModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Stores.CargoSpecific", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Stores.Specification", "Specification")
                        .WithMany("CargoSpecifics")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Parent");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoStore", b =>
                {
                    b.HasOne("Acc.Core.Entities.Stores.Cargo", "Cargo")
                        .WithMany("CargoStores")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Stores.CargoLocation", "CargoLocation")
                        .WithMany("CargoStores")
                        .HasForeignKey("CargoLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("CargoStoreCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("CargoStoreModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Stores.Store", "Store")
                        .WithMany("CargoStores")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("CargoLocation");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Factor", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("FactorCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("FactorModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Persons.Person", "Person")
                        .WithMany("Factors")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Specification", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("SpecificationCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("SpecificationModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Stores.Specification", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Store", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("StoreCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("StoreModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Transaction", b =>
                {
                    b.HasOne("Acc.Core.Entities.Stores.CargoRequest", "CargoRequest")
                        .WithMany("Transactions")
                        .HasForeignKey("CargoRequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("TransactionCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("TransactionModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CargoRequest");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.TransactionItem", b =>
                {
                    b.HasOne("Acc.Core.Entities.Identity.User", "Creator")
                        .WithMany("TransactionItemCreators")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Identity.User", "Modifier")
                        .WithMany("TransactionItemModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Acc.Core.Entities.Stores.Transaction", "Transaction")
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.Account", b =>
                {
                    b.Navigation("ChildAccounts");

                    b.Navigation("DocumentDetails");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.CostCenter", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.Document", b =>
                {
                    b.Navigation("DocumentDetails");

                    b.Navigation("References");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.DocumentDetail", b =>
                {
                    b.Navigation("References");
                });

            modelBuilder.Entity("Acc.Core.Entities.Accounts.FinancialPeriod", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.Module", b =>
                {
                    b.Navigation("RoleModules");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.Permission", b =>
                {
                    b.Navigation("RoleModulePermissions");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.Role", b =>
                {
                    b.Navigation("RoleModules");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.RoleModule", b =>
                {
                    b.Navigation("RoleModulePermissions");
                });

            modelBuilder.Entity("Acc.Core.Entities.Identity.User", b =>
                {
                    b.Navigation("AccountCreators");

                    b.Navigation("AccountModifiers");

                    b.Navigation("CargoCreators");

                    b.Navigation("CargoFactorCreators");

                    b.Navigation("CargoFactorModifiers");

                    b.Navigation("CargoLocationCreators");

                    b.Navigation("CargoLocationModifiers");

                    b.Navigation("CargoModifiers");

                    b.Navigation("CargoRequestApprovers");

                    b.Navigation("CargoRequestCreators");

                    b.Navigation("CargoRequestItemCreators");

                    b.Navigation("CargoRequestItemModifiers");

                    b.Navigation("CargoRequestModifiers");

                    b.Navigation("CargoSpecificCreators");

                    b.Navigation("CargoSpecificModifiers");

                    b.Navigation("CargoStoreCreators");

                    b.Navigation("CargoStoreModifiers");

                    b.Navigation("CostCenterCreators");

                    b.Navigation("CostCenterModifiers");

                    b.Navigation("DepartmentCreators");

                    b.Navigation("DepartmentModifiers");

                    b.Navigation("DocumentCreators");

                    b.Navigation("DocumentDetailCreators");

                    b.Navigation("DocumentDetailModifiers");

                    b.Navigation("DocumentModifiers");

                    b.Navigation("FactorCreators");

                    b.Navigation("FactorModifiers");

                    b.Navigation("FinancialPeriodCreators");

                    b.Navigation("FinancialPeriodModifiers");

                    b.Navigation("ModuleCreators");

                    b.Navigation("ModuleModifiers");

                    b.Navigation("PermissionCreators");

                    b.Navigation("PermissionModifiers");

                    b.Navigation("PersonCreators");

                    b.Navigation("PersonModifiers");

                    b.Navigation("RoleModuleCreators");

                    b.Navigation("RoleModuleModifiers");

                    b.Navigation("RoleModulePermissionCreators");

                    b.Navigation("RoleModulePermissionModifiers");

                    b.Navigation("Roles");

                    b.Navigation("SpecificationCreators");

                    b.Navigation("SpecificationModifiers");

                    b.Navigation("StoreCreators");

                    b.Navigation("StoreModifiers");

                    b.Navigation("TransactionCreators");

                    b.Navigation("TransactionItemCreators");

                    b.Navigation("TransactionItemModifiers");

                    b.Navigation("TransactionModifiers");
                });

            modelBuilder.Entity("Acc.Core.Entities.Persons.Department", b =>
                {
                    b.Navigation("CargoRequests");
                });

            modelBuilder.Entity("Acc.Core.Entities.Persons.Person", b =>
                {
                    b.Navigation("CargoRequests");

                    b.Navigation("Factors");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Cargo", b =>
                {
                    b.Navigation("CargoFactors");

                    b.Navigation("CargoRequestItems");

                    b.Navigation("CargoSpecifics");

                    b.Navigation("CargoStores");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoLocation", b =>
                {
                    b.Navigation("CargoStores");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoRequest", b =>
                {
                    b.Navigation("CargoRequestItems");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.CargoSpecific", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Factor", b =>
                {
                    b.Navigation("CargoFactors");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Specification", b =>
                {
                    b.Navigation("CargoSpecifics");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Store", b =>
                {
                    b.Navigation("CargoLocations");

                    b.Navigation("CargoStores");

                    b.Navigation("Emploees");
                });

            modelBuilder.Entity("Acc.Core.Entities.Stores.Transaction", b =>
                {
                    b.Navigation("TransactionItems");
                });
#pragma warning restore 612, 618
        }
    }
}
